const axios = require('axios');
const filterFilesWithExtensions = require('./filterFilesWithExtensions');
const config = require('../config');
const c3prLOG = require("node-c3pr-logger");

const decideApplicableToolAgents = require('./decideApplicableToolAgents');

async function invokeTools(changes) {
    const logMeta = {nodeName: 'c3pr-brain', correlationId: changes.meta.correlationId, moduleName: 'invokeTools'};

    const applicableToolAgents = decideApplicableToolAgents(changes);
    c3prLOG(`Applicable tools - ${applicableToolAgents.length}: ${applicableToolAgents.map(tool => tool.toolId)}`, logMeta);

    const toolsApplied = [];
    for (let tool of applicableToolAgents) {

        try {
            c3prLOG(`Invoking agent ${tool.toolId} of changes to ${changes.repository.url}.`, {tool}, logMeta);
            let response = await axios.post(tool.agentURL, {
                meta: {
                    correlationId: changes.meta.correlationId,
                    compatibleSchemas: ["c3pr/c3pr-agent::toolInvocation"],
                    dates: changes.meta.dates.concat([{node: "c3pr", date: new Date().toISOString(), "schema": "toolInvocation"}])
                },
                c3pr: {
                    prsUrl: changes.c3pr.prsUrl,
                    patchesUrl: config.c3pr.patchesUrl
                },
                repository: changes.repository,
                files: filterFilesWithExtensions(changes.changeset, tool.extensions),
                tool: tool
            });

            if (response.status === 200) {
                c3prLOG(`Invocation complete. Diff has been generated by ${tool.toolId}. No additional tools will be applied.`, {tool}, logMeta);
                toolsApplied.push({toolId: tool.toolId, diff: true});
                break;
            } else {
                c3prLOG(`Invocation complete. No diff has been generated by ${tool.toolId}. Proceeding to the next applicable tool (if exists).`, {tool}, logMeta);
                toolsApplied.push({toolId: tool.toolId, diff: false});
            }

        } catch (e) {
            c3prLOG(`Error while invoking agent.
                * URL: ${tool.agentURL}
                * Error:
                -----------------------\n
                ${require('util').inspect(e)}
                -----------------------\n\n`, logMeta);
        }

    }

    return toolsApplied;
}

module.exports = invokeTools;